#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from graphdb import GraphCRUD
from graphdb.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void createVertex(Vertex vertex)')
    print('  Vertex readVertex(int id)')
    print('  void updateVertex(Vertex vertex)')
    print('  void deleteVertex(int id)')
    print('  void createEdge(int v1, int v2, int weight, int direction)')
    print('  Edge readEdge(int v1, int v2)')
    print('  void updateEdge(int v1, int v2, int weight, int direction)')
    print('  void deleteEdge(int v1, int v2)')
    print('   listVertexEdges(int vertex)')
    print('   listAdjacentVertex(int vertex)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = GraphCRUD.Client(protocol)
transport.open()

if cmd == 'createVertex':
    if len(args) != 1:
        print('createVertex requires 1 args')
        sys.exit(1)
    pp.pprint(client.createVertex(eval(args[0]),))

elif cmd == 'readVertex':
    if len(args) != 1:
        print('readVertex requires 1 args')
        sys.exit(1)
    pp.pprint(client.readVertex(eval(args[0]),))

elif cmd == 'updateVertex':
    if len(args) != 1:
        print('updateVertex requires 1 args')
        sys.exit(1)
    pp.pprint(client.updateVertex(eval(args[0]),))

elif cmd == 'deleteVertex':
    if len(args) != 1:
        print('deleteVertex requires 1 args')
        sys.exit(1)
    pp.pprint(client.deleteVertex(eval(args[0]),))

elif cmd == 'createEdge':
    if len(args) != 4:
        print('createEdge requires 4 args')
        sys.exit(1)
    pp.pprint(client.createEdge(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'readEdge':
    if len(args) != 2:
        print('readEdge requires 2 args')
        sys.exit(1)
    pp.pprint(client.readEdge(eval(args[0]), eval(args[1]),))

elif cmd == 'updateEdge':
    if len(args) != 4:
        print('updateEdge requires 4 args')
        sys.exit(1)
    pp.pprint(client.updateEdge(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'deleteEdge':
    if len(args) != 2:
        print('deleteEdge requires 2 args')
        sys.exit(1)
    pp.pprint(client.deleteEdge(eval(args[0]), eval(args[1]),))

elif cmd == 'listVertexEdges':
    if len(args) != 1:
        print('listVertexEdges requires 1 args')
        sys.exit(1)
    pp.pprint(client.listVertexEdges(eval(args[0]),))

elif cmd == 'listAdjacentVertex':
    if len(args) != 1:
        print('listAdjacentVertex requires 1 args')
        sys.exit(1)
    pp.pprint(client.listAdjacentVertex(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
