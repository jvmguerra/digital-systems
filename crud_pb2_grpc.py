# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import crud_pb2 as crud__pb2


class CrudGrpcStub(object):
  """The greeting service definition.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.SendCommand = channel.unary_unary(
        '/crudGrpc.CrudGrpc/SendCommand',
        request_serializer=crud__pb2.ItemRequest.SerializeToString,
        response_deserializer=crud__pb2.Response.FromString,
        )


class CrudGrpcServicer(object):
  """The greeting service definition.
  """

  def SendCommand(self, request, context):
    """Sends a greeting
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_CrudGrpcServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'SendCommand': grpc.unary_unary_rpc_method_handler(
          servicer.SendCommand,
          request_deserializer=crud__pb2.ItemRequest.FromString,
          response_serializer=crud__pb2.Response.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'crudGrpc.CrudGrpc', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
